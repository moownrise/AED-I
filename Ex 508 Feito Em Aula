#include <stdio.h>
#include <stdlib.h>


typedef struct TreeNode{
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
} TreeNode;


int* findFrequentTreeSum(struct TreeNode* root, int* returnSize) {
    struct TreeNode* root = (TreeNode*)malloc(sizeof(TreeNode));

    if(root == NULL) return NNULL;

    if (root->left == NULL && root->right == NULL) return root->val;
    return findFrequentTreeSum(root->left) + findFrequentTreeSum(root->right);

    root->val = 5;
    root->left = (TreeNode*)malloc(sizeof(TreeNode));
    root->right = (TreeNode*)malloc(sizeof(TreeNode));
    root->left->val = 2;
    root->right->val = -3;
    returnSize = (int*)malloc(sizeof(int));
    return findFrequentTreeSum(root, returnSize);
}

struct TreeNode* create_node(int val) {
    struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));

    node->val = val;
    node->left = NULL;
    node->right = NULL;
    return node;

}

int main(){
    /* Construção manual da árvore do exemplo 1:
                5
               / \
              2   -3                       */                
        struct TreeNode* root = create_node(5);
        root->left = create_node(2);
        root->right = create_node(-3);

    /* Construção manual da árvore do exemplo 2:
                5
               / \
              2   -5                        */                
        struct TreeNode* root = create_node(5);
         root->left = create_node(2);
        root->right = create_node(-5);
    
    printf("%d ", root->val);

    return 0;
}
